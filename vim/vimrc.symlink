set nocompatible | filetype indent plugin on | syn on
filetype plugin on
set shell=/bin/bash

set directory=~/.vim-tmp//,~/.tmp//,~/tmp//,/tmp//

function! Render_Only_File(...)
  let builder = a:1
  let context = a:2

  call builder.add_section('file', '!! %F')

  return 1   " modify the statusline with the current contents of the builder
endfunction

call plug#begin('~/.vim/bundle')

Plug 'vim-scripts/matchit.zip'
Plug 'vim-scripts/MatchTag' " Find matching XML/HTML Tags
Plug 'vim-scripts/L9' "grep buffer, grepbufferall
Plug 'vim-scripts/command-t' " file explorer
Plug 'https://github.com/scrooloose/nerdtree.git' " file explorer
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'https://github.com/Shougo/unite.vim.git'
Plug 'vim-scripts/taglist.vim'
Plug 'https://github.com/flazz/vim-colorschemes.git'
Plug 'https://github.com/rafi/awesome-vim-colorschemes.git'
"Plug 'tpope/vim-rails'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-fugitive' "git support
Plug 'tpope/vim-cucumber'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-obsession'
"Plug 'tpope/vim-flagship'
Plug 'tpope/vim-git'
Plug 'tpope/vim-jdaddy'
Plug 'https://github.com/vim-airline/vim-airline.git'
Plug 'https://github.com/vim-airline/vim-airline-themes.git'
Plug 'https://github.com/Lokaltog/powerline.git'
Plug 'vim-scripts/Syntastic' "syntax checking
Plug 'ryanoasis/vim-devicons'
Plug 'gcorne/vim-sass-lint'
Plug 'https://github.com/alvan/vim-closetag.git'
Plug 'https://github.com/othree/html5-syntax.vim.git' " still have to copy files to ~./vim/syntax
Plug 'https://github.com/Valloric/YouCompleteMe.git' "as you type compile support
Plug 'https://github.com/Shougo/neomru.vim.git' " for UNITE file_mru
Plug 'vim-scripts/camelcasemotion'
Plug 'https://github.com/scrooloose/nerdcommenter.git'
Plug 'https://github.com/mileszs/ack.vim.git' "grep current project tree
Plug 'vim-scripts/Gundo' "view vim undo tree (and patch!)
Plug 'https://github.com/Shutnik/jshint2.vim.git'
"Plug 'grunt'
Plug 'https://github.com/mhinz/vim-signify.git' " instead of git-gutter
Plug 'vim-scripts/trailing-whitespace'
Plug 'https://github.com/Raimondi/delimitMate.git'
Plug 'jelera/vim-javascript-syntax'
Plug 'https://github.com/honza/vim-snippets.git'
Plug 'vim-scripts/vim-coffee-script'
Plug 'othree/html5.vim'
Plug 'vim-scripts/EasyMotion'
Plug 'vim-scripts/DetectIndent'
Plug 'tsaleh/vim-align'
Plug 'vim-scripts/restore_view.vim'
Plug 'https://github.com/vim-ruby/vim-ruby.git'
Plug 'vim-scripts/eruby.vim'
Plug 'ingydotnet/yaml-vim'
Plug 'thoughtbot/vim-rspec'
Plug 'tpope/vim-sleuth' "guess at tab settings based on file
Plug 'tpope/vim-endwise' "auto adds 'end' in ruby
Plug 'tpope/vim-sensible' "common keys/default settings
Plug 'https://github.com/tpope/vim-surround.git' "for adding and removing tags quickly
"" set default directory when opening a file
Plug 'vim-scripts/vim-rooter'
Plug 'vim-scripts/dbext.vim'
Plug 'MarcWeber/vim-addon-async'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'ujihisa/unite-colorscheme'
Plug 'junkblocker/unite-codesearch'
Plug 'junkblocker/unite-tasklist'
Plug 'godlygeek/tabular'
Plug 'hallison/vim-rdoc'
Plug 'https://github.com/rorymckinley/vim-rubyhash'

call plug#end()
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'
"let g:Powerline_symbols = 'unicode'
call airline#add_inactive_statusline_func('Render_Only_File')
let g:airline_theme="solarized"
let g:unite_force_overwrite_statusline = 0
let g:unite_codesearch_command = "/Users/kmallory/go/bin/csearch -m 50 '%s'"
let g:csearchhighlight = 'Y'
let g:unite_source_codesearch_ignore_case = 0
let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
let g:CommandTFileScanner = "watchman"
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type= 2
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#tabs_label = 't'
let g:airline#extensions#tabline#buffers_label = 'b'

"set rtp+=~/Documents/github/powerline/powerline/bindings/vim
set rtp+=~/bin
" All of your Plugins must be added before the following line
"set ffs=dos,unix,mac
set t_co=256

set expandtab
set softtabstop=4                  " yep, two
set tabstop=4

let g:rspec_runner = "os_x_terminal"
"let g:rspec_command = "!bundle exec rspec --drb {}"
let g:rspec_command = "cd /Users/kmallory/development/pwd;bundle exec rspec {spec}"
if has("gui_running")
  set macmeta
  set guifont=DaddyTimeMonoNerdFontCompleteM-Book:h18
  "set guifont=Inconsolata-g\ for\ Powerline:h14
  "set guifont=Source\ Code\ Pro\ for\ Powerline:14
  set lines=41
  set columns=200
  colorscheme solarized
  set background=light
  set guioptions-=e
  set guitablabel=%!GuiTabLabel()
else
  " This is console Vim.
  if exists("+lines")
    set lines=50
  endif
  if exists("+columns")
    set columns=150
    set term=xterm-256color
    set background=light
    colorscheme solarized
  endif
endif


autocmd! BufWritePost vimrc nested :source ~/.vimrc
"autocmd BufReadPost * :DetectIndent
autocmd BufWinLeave * if expand("%") != "" | mkview! | endif
autocmd BufWinEnter * if expand("%") != "" | loadview | endif
"autocmd BufWinLeave *.* mkview!
"autocmd BufWinEnter *.* silent loadview
let g:indent_guides_start_level=2
let g:indent_guides_size=1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#090f0f ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=black ctermbg=4

autocmd QuickFixCmdPost * nested cwindow | redraw!
autocmd BufWritePost *.coffee silent make!

set omnifunc=syntaxcomplete#Complete
"set completeopt=longest,menuone,preview
set completeopt=menuone,preview

let g:SuperTabDefaultCompletionType = "context"


function! Auto_complete_string()
  if pumvisible()
    return "\<C-n>"
  else
    return "\<C-x>\<C-o>\<C-r>=Auto_complete_opened()\<CR>"
  end
endfunction

function! Auto_complete_opened()
  if pumvisible()
    return "\<Down>"
  end
  return ""
endfunction
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" store undos
set undofile
set undodir=/tmp/.vimundo/
set undolevels=200

" Highlight problematic whitespace
"set listchars=tab:>.,trail:.,extends:#,nbsp:.
"set listchars=tab:\|\ ,trail:.,extends:#,nbsp:.,eol:¬
"set listchars=tab:→→,trail:.,extends:#,nbsp:.,eol:¬
"set listchars=eol:¬,tab:→→,extends:>,precedes:<,nbsp:..

set nolist





" tab auto completion
" via http://robots.thoughtbot.com/post/27041742805/vim-you-complete-me
set wildmode=longest,list:longest,list:full
set completeopt=menu,preview
"  UI
set ruler                          " show the cursor position all the time
set noshowcmd                      " don't display incomplete commands
set nolazyredraw                   " turn off lazy redraw
set wildmenu                       " turn on wild menu
set wildmode=list:longest,full
set ch=2                           " command line height
set backspace=2                    " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set nostartofline                  " don't jump to the start of line when scrolling

" syntastic
"let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_enable_signs=1
if has('statusline')
  "set laststatus=2
  " Broken down into easily includeable segments
  "set statusline=%<%f\    " Filename
  "set statusline+=%w%h%m%r " Options
  set statusline+=%{fugitive#statusline()} "  Git Hotness
  "set statusline+=\ [%{&ff}/%Y]            " filetype
  "set statusline+=\ [%{getcwd()}]          " current dir
  "set statusline+=%#warningmsg#
  "set statusline+=%{SyntasticStatuslineFlag()}
  "set statusline+=%*
  set statusline+=%{fugitive#statusline()}
  let g:syntastic_enable_signs=1
  "set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
set statusline+=%{fugitive#statusline()}
let g:syntastic_auto_jump = 3
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_loc_list_height = 8
let g:syntastic_check_on_wq = 1
let g:syntastic_ruby_checkers          = ['rubocop', 'mri']
let g:syntastic_ruby_rubocop_exec = '~/bin/rubocop.sh'
let g:syntastic_haml_checkers = ['haml_lint', 'haml']
let g:syntastic_haml_rubocop_exec = '~/bin/rubocop.sh'
let g:syntastic_haml_haml_lint_exec = '~/bin/haml-lint.sh'
let g:syntastic_sass_checkers=["sass_lint"]
let g:syntastic_scss_checkers=["scss_lint"]
let g:syntastic_scss_scss_lint_exec='/Users/kmallory/.rbenv/shims/scss-lint'
let g:syntastic_coffeelint_args  = '--reporter csv'

let ruby_spellcheck_strings = 1



" fix for user defined mapping not found
"
let g:clang_user_options='|| exit 0'


" Split in a more normal way
set splitbelow
set splitright
set complete=.,w,t
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
set fillchars+=fold:\
set foldmethod=syntax
"set foldopen=all,insert
"set foldclose=all
set foldlevelstart=20
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8
set encoding=utf-8

set foldtext=CustomFoldText()
fu! CustomFoldText()
  "get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " l:" . foldSize. " "
  let foldSizeStr = ""
  let foldLevelStr = " "
  "let foldLevelStr = repeat("+--", v:foldlevel)
  let lineCount = line("$")
  let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
  let expansionString = repeat(" ", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
  return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf


highlight FoldColumn  gui=bold    guifg=grey65     guibg=black
highlight Folded          gui=italic  guifg=Black          guibg=black
highlight LineNr          gui=NONE        guifg=white guibg=black
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=italic guifg=white guibg=black
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=italic guifg=white guibg=black
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=italic guifg=white guibg=black
highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=italic guifg=white guibg=black
highlight link SignifySignAdd             DiffAdd
highlight link SignifySignChange          DiffChange
highlight link SignifySignDelete          DiffDelete
highlight link SignifySignChangeDelete    SignifySignChange
highlight link SignifySignDeleteFirstLine SignifySignDelete


autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'


fu! SeeTab()
  if !exists("g:SeeTabEnabled")
    let g:SeeTabEnabled = 1
    let g:SeeTab_list = &list
    let g:SeeTab_listchars = &listchars
    let regA = @a
    redir @a
    hi SpecialKey
    redir END
    let g:SeeTabSpecialKey = @a
    let @a = regA
    silent! hi SpecialKey guifg=black guibg=DarkBlue ctermfg=black ctermbg=magenta
    set list
    set listchars=tab:\|\
  else
    let &list = g:SeeTab_list
    let &listchars = &listchars
    silent! exe "hi ".substitute(g:SeeTabSpecialKey,'xxx','','e')
    unlet g:SeeTabEnabled g:SeeTab_list g:SeeTab_listchars
  endif
endfunc
com! -nargs=0 SeeTab :call SeeTab()

syn match LeadingWS /\(^\s*\)\@<=\s/ conceal cchar=·
setlocal conceallevel=2 concealcursor=nv
setlocal spell spelllang=en_us
let g:NERDTreeMapActivateNode="<F3>"
let g:NERDTreeMapPreview="<F4>"
let g:NERDTreeWinPos="left"
let g:NERDTreeAutoDeleteBuffer=1
"let g:extra_whitespace_ignored_filetypes=["unite"]
let NERDTreeQuitOnOpen=1
"let g:ctrlp_root_markers = ['.ctrlp']
"let g:ctrlp_working_path_mode = 'ra'
"let g:ctrlp_match_window = ''
"let g:ctrlp_max_files = 0
"let g:ctrlp_follow_symlinks=1
"let g:ctrlp_max_depth=40

syn region AspVBSFold start="^\s*\(if\)\s\+.*$" end="^\s*end\s\+\(if\)\>.*$" fold contained transparent keepend
highlight FoldColumn  gui=bold    guifg=white guibg=black
"highlight Folded          gui=italic  guifg=white guibg=gray
"highlight LineNr          gui=NONE        guifg=grey60     guibg=Grey90

autocmd BufWritePre * :%s/\s\+$//e
"autocmd BufReadPre *.asp :set et|retab
set laststatus=2
set showtabline=2
set noshowmode
set ic
"set transparency=0
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
  let myUndoDir = expand(vimDir . '/undodir')
  " No console pops up
  call system('mkdir ' . myUndoDir)
  let &undodir = myUndoDir
  set undofile
endif


autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"
" Key Mappings
"

let mapleader = ","
let maplocalleader = ";"
map <Leader>cl :w<cr>:exe "!bundle exec cucumber %" . ":" . line(".") "RAILS_ENV=development"<cr>
"map <Leader>n <plug>NERDTreeTabsToggle<CR>
map <Leader>n <plug>NERDTreeToggle<CR>
map <Leader>z :lclose<cr>
vmap ,x :!tidy -q -c -i --show-errors 0>
" inoremap = insertmode
" noremap, nnoremap  = normal mode
inoremap <C-@> <C-Space>
noremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?  \ "\<lt>C-n>" : \ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .      \ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .      \ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
inoremap <expr> <Nul> Auto_complete_string()
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
inoremap <expr> <S-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
      \ '<C-x><C-u><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'
" tab navigation like firefox
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>
" big word keys should act like a normal ones
noremap <silent> W w
noremap <silent> B b
noremap <silent> E b

" and little word keys should know about camel case and underscores
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e

"nnoremap    <F2> :<C-U>setlocal lcs=tab:\|\ ,trail:.,extends:#,nbsp:.,eol:¬ list! list? <CR>
" Reselect visual block after indent/outdent
" <3 you, vimbits.com
vnoremap < <gv
vnoremap > >gv
imap <Tab> <C-P>
"
" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
"Record into register 'q', playback with 'Q'
"For quick recordings just type qq to start recording, then q to stop. You don't have to worry about the name this way (you just named the recording 'q'). Now, to play back the recording you just type Q.
nnoremap Q @q
"copy to end of line
nnoremap Y y$
"use space for search in normal mode rather than "/"
"nmap <Space> /
"nmap <C-Space> ?
silent! nmap <C-p> :NERDTreeToggle<CR>
silent! map <F3> :NERDTreeFind<CR>


" Search
nmap <leader>s  :%s/
vmap <leader>s  :s/
" Split screen
map <leader>v   :vsp<CR>


" Move between screens
"map <leader>w   ^Ww
"map <leader>=   ^W=
"map <leader>j   ^Wj
"map <leader>k   ^Wk
"nmap <C-j>              <C-w>j
"nmap <C-k>              <C-w>k
"nmap <C-h>              <C-w>h
"nmap <C-l>              <C-w>l


" Auto-indent whole file
nmap <leader>=  gg=G``
map <silent> <F7> echo "Working...": gg=G``: :delmarks z<CR>:echo "Reformatted."<CR>

" Fast scrolling
nnoremap <C-e>  3<C-e>
nnoremap <C-y>  3<C-y>

" Previous/next quickfix file listings (e.g. search results)
map <M-D-Down>  :cn<CR>
map <M-D-Up>    :cp<CR>

" Previous/next buffers
map <M-D-Left>  :bp<CR>
map <M-D-Right> :bn<CR>


" File tree browser
"map \                   :NERDTreeTabsToggle<CR>
map \                   :NERDTreeToggle<CR>
map <leader>\   :Unite buffer file file_rec file_mru codesearch<CR>
map <leader>c :Unite -start-insert codesearch <CR>

" File tree browser showing current file - pipe (shift-backslash)
map \|                  :NERDTreeFind<CR>
call unite#filters#matcher_default#use(['matcher_fuzzy'])
map <leader>u <C-u>:Unite -start-insert file buffer file_rec file_mru everything codesearch <CR>

"indent/unindent visual mode selection with tab/shift+tab
vmap <tab> >gv
vmap <s-tab> <gv


"Comment/uncomment lines
map <leader>/   <plug>NERDCommenterToggle
map <D-/>       <plug>NERDCommenterToggle
imap <D-/>      <Esc><plug>NERDCommenterToggle i

" In command-line mode, <C-A> should go to the front of the line, as in bash.
cmap <C-A> <C-B>

" Copy current file path to system pasteboard
map <silent> <D-C> :let @* = expand("%")<CR>:echo "Copied: ".expand("%")<CR>
map <leader>C :let @* = expand("%").":".line(".")<CR>:echo "Copied: ".expand("%").":".line(".")<CR>

" Disable middle mouse button, F1
map <MiddleMouse>       <Nop>
imap <MiddleMouse>      <Nop>
map <F1>                <Nop>
imap <F1>               <Nop>

" Easy access to the shell
"map <Leader><Leader> :!

" AckGrep current word
map <leader>a :Ack<CR>
" AckVisual current selection
"vmap <leader>a :call AckVisual()<CR>

" Make Y consistent with D and C
map Y                   y$

"nnoremap <silent> <F9> :TagbarToggle<CR>

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

set diffopt+=vertical

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
function! GuiTabLabel()
  "return fnamemodify(bufname(winbufnr(1)), ":t")
    "return expand("%f")
    " or do something more clever
  return substitute( expand("%f"), '\([^/]\)[^/]*/', '\1../', "g" )
  endif
endfunction
" MySQL
let g:dbext_default_profile_mysql_local = 'type=MySQL:user=root:passwd=pwd0:dbname=pwdror'
hi Folded guifg=#ffffe5 guibg=#2a2a2a
"highlight Folded     gui=none guifg=#804030 guibg=#fff0d0 ctermbg=black ctermfg=black cterm=bold

highlight link GitGutterAdd         diffAdded " an added line
highlight link GitGutterChange      Type " a changed line
highlight link GitGutterDelete      diffRemoved " at least one removed line
highlight link GitGutterChangeDelete luaStatement " a changed line followed by at least one removed line
""You can either set these with highlight GitGutterAdd {key}={arg}... or link them to existing highlight groups with
", say, highlight link GitGutterAdd DiffAdd.
"
" CoffeeWatch
"
let coffee_watch_vert = 1
autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent
let g:NERDCustomDelimiters = {'rb': { 'left': '#', 'leftAlt': '#', 'rightAlt': '#' }}
set encoding=UTF-8
